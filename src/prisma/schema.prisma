datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String     @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  activities    Activity[]
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Activity {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  name              String
  description       String?
  category          String?
  habitGoalValue    Int     @default(1)
  habitCurrentValue Int     @default(0)
  habitGoalUnit     String  @default("times")

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  user         User          @relation(fields: [userId], references: [id])
  activityLogs ActivityLog[]
}

model ActivityLog {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  activityId String   @db.ObjectId
  date       DateTime @default(now())
  quantity   Int?     @default(1)

  activity Activity @relation(fields: [activityId], references: [id], onDelete: Cascade)
}
